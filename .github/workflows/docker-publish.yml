name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gepha-geo/sqlserver-schema-migrator

jobs:
  ensure-base-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check if base image exists
        run: |
          if docker manifest inspect ghcr.io/gepha-geo/dotnet-runtime-git:9.0 > /dev/null 2>&1; then
            echo "Base image exists"
          else
            echo "Base image not found. Please run base-image workflow first."
            exit 1
          fi

  build-and-push:
    needs: ensure-base-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          
      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=1.0.0,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
            
      - name: Build and push Docker image
        run: |
          # Restore dependencies
          dotnet restore
          
          # Get the version from VERSION file for main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION=$(cat VERSION)
            CONTAINER_TAGS="-p:ContainerImageTags=\"${VERSION};latest\""
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # For tags, use the tag name without 'v' prefix
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
            CONTAINER_TAGS="-p:ContainerImageTag=${VERSION}"
          else
            CONTAINER_TAGS="-p:ContainerImageTag=pr-${{ github.event.pull_request.number }}"
          fi
          
          # Build and publish container
          dotnet publish SqlServer.Schema.FileSystem.Serializer.Dacpac.Runner \
            --os linux \
            --arch x64 \
            -c Release \
            /t:PublishContainer \
            -p:ContainerRegistry=${{ env.REGISTRY }} \
            -p:ContainerRepository=${{ env.IMAGE_NAME }} \
            ${CONTAINER_TAGS}
            
      - name: Build and push multi-arch image (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          # Also build for ARM64
          dotnet publish SqlServer.Schema.FileSystem.Serializer.Dacpac.Runner \
            --os linux \
            --arch arm64 \
            -c Release \
            /t:PublishContainer \
            -p:ContainerRegistry=${{ env.REGISTRY }} \
            -p:ContainerRepository=${{ env.IMAGE_NAME }} \
            -p:ContainerImageTag=latest-arm64
            
      - name: Make package public
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          # Make the package public using GitHub API
          echo "Making package public..."
          PACKAGE_NAME="sqlserver-schema-migrator"
          
          # Wait a bit for the package to be fully registered
          sleep 10
          
          # Update package visibility
          curl -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/orgs/GEPHA-geo/packages/container/${PACKAGE_NAME}" \
            -d '{"visibility":"public"}' || echo "Failed to make package public - may need manual configuration"

  test-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      packages: read
      
    steps:
      - name: Test Docker image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || echo "Expected usage error"
          
      - name: Check image metadata
        run: |
          docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest